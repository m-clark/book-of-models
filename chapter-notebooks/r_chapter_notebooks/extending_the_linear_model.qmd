---
title: "Extending the Linear Model"
format: html
---

```{r}
df_reviews = read_csv('https://tinyurl.com/moviereviewsdata')
```

## Interactions
```{r}


model_baseline = lm(rating ~ children_in_home + genre, data = df_reviews)
model_interaction = lm(rating ~ children_in_home * genre, data = df_reviews)

summary(model_interaction)
```


```{r}
anova(model_interaction)
```

## Mixed Models


```{r}
library(lme4)

df_happiness_all = read_csv("https://tinyurl.com/worldhappinessallyears")

df_happiness_all = df_happiness_all |> 
    mutate(decade_0 = (year - min(year))/10)

# random intercepts are specified by a 1
model_ran_int = lmer(
    happiness_score ~ decade_0 + (1| country), 
    df_happiness_all
)

model_ran_slope = lmer(
    happiness_score ~ decade_0 + (1 + decade_0 | country), 
    df_happiness_all
)

# not shown
summary(model_ran_int)
summary(model_ran_slope)
```


```{r}
estimated_RE = ranef(model_ran_slope)
# mixedup::extract_random_effects(model_ran_slope) # prettier version
```


```{r}
# coef(model_ran_slope) stored here
ranef_usa = estimated_RE$country
ranef_usa = ranef_usa |> 
    rownames_to_column('country') |> 
    filter(country == 'United States') 

ranef_usa[1, c('(Intercept)',  'decade_0')] + fixef(model_ran_slope) 
```


## Generalized Additive Models


```{r}
x = rnorm(1000)
y = sin(x)

tibble(x, y) |> 
    ggplot(aes(x = x, y = y)) +
    geom_smooth(method = 'gam', se = FALSE) 
```


### A Standard GAM


```{r}
library(mgcv)

df_happiness_2018 = read_csv('https://tinyurl.com/worldhappiness2018')

model_gam = gam(
    happiness_score ~ s(healthy_life_expectancy_at_birth, bs = 'bs'), 
    data = df_happiness_2018
)

summary(model_gam)
```


```{r}
# not shown
plot(model_gam)
```

## Quantile Regression


```{r}
library(quantreg)

model_median = rq(rating ~ word_count_sc, tau = .5, data = df_reviews)

summary(model_median)
```


```{r}
tau_values = c(.1, .3, .5, .7, .9)

results = coef(rq(rating ~ word_count_sc, tau = tau_values, data = df_reviews))

as_tibble(t(results), rownames = 'tau') 
```


### DIY


```{r}
quantile_loss = function(par, X, y, tau) {
    y_hat = X %*% par
    
    residual = y - y_hat
    
    loss = ifelse(
        residual < 0, 
        (tau - 1) * residual, 
        tau * residual
    )
    
    sum(loss)
}
```


```{r}
X = cbind(1, df_reviews$word_count_sc)
y = df_reviews$rating


optim(
    par = c(intercept = 0, word_count_sc = 0),
    fn  = quantile_loss,
    X   = X,
    y   = y,
    tau = .5
)$par
```