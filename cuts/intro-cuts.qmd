intro-cuts

- Why was this cut? 
    - Becuase we don't need to give a mini-chapter when they can just go to a chapter to see how it is. We also just gave a typical chapter outline a couple paragraphs previously.
- We could turn this into a prelude chapter if desired.


<!-- We are taking this approach for one reason: so that you can go as deep as you wish. If you are looking for a quick tutorial on helpful models, then you might not find yourself going any deeper than the standard functions (or even getting into the code at all). If you want to really dive into these models, then you might find yourself working through the estimation chapter @sec-estimation for example. 

While we certainly recommend working through the chapters in order, we want to give you the flexibility to -->

## Choose Your Own Adventure

As an example of how things will go, let's look at the different ways we might express a relationship between two variables. If you want just a little bit of background, you can read through the *Overview* and *Key Ideas*. If you want to see the easy way to use the model, you can work through the *Standard Function* section. If you want to see the method from start to finish, feel free to work through the *Roll Your Own* section. If all of that sounds like a lot of work and you'd rather look at the pretty pictures, that's fine too[^visisgood], just jump to the *Visualization* section.

[^visisgood]: We love pretty pictures too! Sometimes it's the best way to bring a lot of ideas together.




### Overview

Correlations provide a means of understanding how, and *if*, two or more things are related. For any two variables or features, we can estimate a single value that signals the strength and direction of the relationship between them. Despite limitations, correlations can be a great way to get a quick understanding of the relationship between two features. One variable could be temperature while another variable is the number of ice cream cones sold, or one is the number of hours spent studying and another variable is the grade on a test, maybe the number of hours spent watching TV versus the number of hours spent exercising. The correlation value will give us information that is similarly interpretable in each case.


### Key Ideas

Here are key ideas to consider for understanding correlation.

- **Variance**: Two variables must vary if they are to *co-*vary
- **Covariance**: Joint variability of two variables, i.e. how they vary together
- **Interpretation**: Covariance is hard to interpret because the variables are typically on different scales
- **Correlation**: Correlation is a standardized covariance, so it is easier to interpret

Another way to think about correlation is through the lens of *variance* *covariance*. Covariance is a measure of the joint variability of two variables, i.e. how they *vary* together. If two variables are highly correlated, then they have a high degree of covariance, i.e. they vary together in a meaningful way. 


### Demonstration

To demonstrate correlation, we could start by formally defining it. Here is a formula for the Pearson-Product-Moment correlation coefficient. What everyone typically just calls "correlation" or Pearson's *r* is actually the *Pearson Product-Moment Correlation* -- that is a lot of words, though, so we will just go with correlation. As we mentioned earlier, we want to give you the choice to dive in as deep as you want. 

$$
\rho = \frac{\Sigma(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\Sigma(x_i-\bar{x})^2\Sigma(y_i-\bar{y})^2}}
$${#eq-pearson}

In words, starting with the numerator, we are going to subtract the mean of *x* from every observation of *x*, do the same for *y*, multiply them together, and then sum them to produce a single value. If you've taken a statistics class before, you might have seen this part of the formula when talking about *covariance* -- the joint variability of two variables. In fact, if you just divide the numerator by n-1 you'd get the covariance value. Covariance values, though, are not standardized; therefore, they are a bit tough to interpret. You will get a sign indicating relationship (just like a correlation) and the magnitude tells you the strength of the relationship, but it is hard to get your head around how much stronger a covariance of 4.00 is compared to a covariance of 0.28. 

This is where the denominator comes into play. To put it into real terms, we will subtract the mean of *x* from every observation of *x* (i.e. get the deviations of x), square those values, and sum those values to produce a single value. We will do the same for *y*, multiply those results, and then take the square root of that product. The denominator might also look familiar to some. The individual pieces- $\Sigma(x_i-\bar{x})^2$ and $\Sigma(y_i-\bar{y})^2$ - are computing the *variance* of x and y. Taking the square root of variance gives us the *standard deviation*. Basically, we're getting a combined standard deviation to scale the covariance. Using the standard deviation will mitigate the effects of *x* and *y* potentially being on different scales; in other words, we want to know how much two variables move together, even if the means and typical movement (deviation) might be very different. 

Here is a simplification, depicting correlation as a **standardized covariance**.

$$
\rho = \frac{cov(x,y)}{\sigma_x\sigma_y}
$${#eq-corcov}

where $cov(x,y)$ is the covariance between $x$ and $y$, and $\sigma_x$ and $\sigma_y$ are the standard deviations of $x$ and $y$, respectively. So putting it all together, we are simply looking at the ratio of raw covariance (i.e., how much two variables "move" together) and standard deviation (i.e., the amount of dispersion within a variable). Just as we mentioned earlier, simpler concepts often tie models together! What might look like a tricky formula, really just starts with means and deviations, variance and covariance!

As a reminder, this correlation will give us an idea about the **linear relationship** between two continuous variables; we will get a value between -1 and 1, with values closer to 0 indicating that there is no linear relationship between the two variables. As values get closer to 1, we have a **positive correlation** -- as values for one variable increase, values for the other variable tend to increase along with it. As the correlation gets closer to -1, we have a **negative correlation** -- as values for one variable increase, values for the other variable typically decrease. Correlations can be useful for quickly exploring linear relationships, but let's not get too excited about it -- they aren't going to help you answer any big questions! We also don't want to get too carried away with "statistical significance" yet -- once samples get large, even small correlations become "significant". Instead, just use correlations to explore the patterns within your data, start getting ideas about interesting relationships that you might find, and leave worries about significance for people with more time on their hands.


#### Code

It's often easier to understand a concept by seeing it in action. So let's start by creating some data. We'll create a variable `x`, then make a `y` that will have a linear relationship with it, but also have some random noise. We'll then plot the two variables to see what they look like. To help your understanding, fiddle with the knobs noted.

:::{.panel-tabset}

###### R 

```{r r_create_sim_data}
set.seed(seed = 1001)
N = 500
x = rnorm(n = N, mean = 0, sd = 1)

# Fiddle with the .5 and .75.
# The first can also be negative if you like!
y = .5 * x + rnorm(n = N, mean = 0, sd = .75)
```


###### Python  

```{python}
import numpy as np

np.random.seed(seed = 1001)
N = 500
x = np.random.normal(loc = 0, scale = 1, size = N)

# Fiddle with the .5 and .75. 
# The first can also be negative if you like!
y = .5*x + np.random.normal(loc = 0, scale = .75, size = N) 
```

:::

Now check out the plot of those two values:

```{r, cor_viz}
#| echo: FALSE
#| fig-cap: Scatterplot of two variables.

library(ggplot2)

ggplot(data.frame(x, y), aes(x, y)) +
    geom_point() +
    theme_minimal()
```

Remember that correlation is testing for the presence of a linear relationship, with -1 indicating a perfect negative relationship, 1 indicating a perfect positive relationship, and 0 indicating no relationship. Before we see the actual correlation value for these two variables, take a guess as to what value we are going to get!

Before we create our own function, we can use R's `cor` function or  numpy's `corrcoef` function.  You should get something around `r round(cor(x, y), 1)`.

```{r standard_cor}
#| eval: FALSE
# Results for R and Python will be slightly
# different due to different random number generators
cor(x, y)
np.corrcoef(x, y)
```

```{r show_standard_cor}
#| echo: FALSE
cor(x, y)
```

When you guessed the value, were you close? If so, congrats! If not, try fiddling with those knobs noted until things get a little clearer. But now that we already know the answer, let's make sure that we can get the same answer by working through the formula via code. The following takes that initial formula approach and turns it into a function that we can use to compute the correlation between any two variables. We'll then use that function to compute the correlation between our `x` and `y` variables.

:::{.panel-tabset}

###### R  

```{r, r_create_cor}
my_cor = function(x, y) {
    # First, we need to compute the averages for x and y.
    # The rest follows the formula.
    x_bar = mean(x)
    y_bar = mean(y)

    numerator = sum((x - x_bar) * (y - y_bar))

    denominator = sqrt(
        sum((x - x_bar)^2) * sum((y - y_bar)^2)
    )

    numerator / denominator
}

# using the builtin functions
my_cor2 = function(x, y) {
    cov(x, y) / (sd(x) * sd(y))
}

my_cor(x, y)
```

###### Python  

```{python python_generate_data}
#| eval: FALSE
#| echo: FALSE
import numpy as np

np.set_printoptions(precision=2)

np.random.seed(seed=59)

x = np.random.normal(loc=0, scale=1, size=1000)

y = np.random.normal(loc=5, scale=2, size=1000)
```


```{python python_create_cor}
def my_cor(x, y):
  # First, we need to compute the averages for x and y.
  # The rest follows the formula.
    x_bar = np.mean(x)
    y_bar = np.mean(y)
    
    numerator = np.sum((x - x_bar) * (y - y_bar))
    
    denominator = np.sqrt(
      np.sum((x - x_bar)**2) * np.sum((y - y_bar)**2)
    )

    # We will finish by dividing the numerator by the 
    # denominator.
    # This will ensure that we have a value between -1 and 1.
    return(numerator / denominator)

my_cor(x, y)
``` 

:::

It doesn't matter which language we use, the steps are largely the same when we break it down into the individual pieces!

### Visualization

A long time ago, in a land far away, the authors of this book worked together to help clients traverse the forests of data to reach their modeling goals. While there were many great learning opportunities along the way, working with clients showed us the kinds of help that people really needed in adventuring with data and models. Even so, there were many requests that made us grimace, and one stood atop Mount Ridiculous: to produce a correlation matrix with 115 variables and export that matrix to a spreadsheet. We still don't recommend such shenanigans, but there are ways to try and understand correlation matrices. Since we were in the business of helping people do their work better, one way we often did so was via a *corrplot*.

We'll start with a something manageable. We create a data set with six variables of two sets: a, b , c, and x, y, z, and then we can take a quick look at the correlation matrix.

```{r r_cor_data}
#| echo: FALSE
set.seed(1001)

Sigma = matrix(
    c(
        1, .5, .5, -.15, -.15, -.15,
        .5, 1, .5, -.15, -.15, -.15,
        .5, .5, 1, -.15, -.15, -.15,
        -.15, -.15, -.15, 1, .5, .5,
        -.15, -.15, -.15, .5, 1, .5,
        -.15, -.15, -.15, .5, .5, 1
    ),
    byrow = TRUE,
    nrow = 6
)

df_correlation = MASS::mvrnorm(
    n = 500,
    mu = rep(0, 6),
    Sigma = Sigma,
    empirical = FALSE
)

df_correlation = as.data.frame(df_correlation)
colnames(df_correlation) = c("a", "b", "c", "x", "y", "z")
```


```{r r_cor_matrix}
#| echo: FALSE
#| tbl-cap: Correlation matrix
correlation_matrix = cor(df_correlation)

df_cormat = correlation_matrix |>
    corrr::as_cordf(diagonal = TRUE) |>
    rename(feature = term)

df_cormat |>
    gt() |>
    fmt_number(
        columns = c(-feature),
        decimals = 2
    )
```

Now we have the *pairwise correlations* between all six of our variables, with 1's on the diagonals (naturally, a variable has a perfect correlation with itself). You can check out the lower diagonal or the upper diagonal, because they contain the exact same information. Quickly, though, find the interesting pattern in that matrix!

Producing the correlations between just 6 variables gives us 15 correlation coefficients to examine! You can see that you'll need to spend more than a few seconds on finding the interesting patterns within the data (or if there are any patterns at all). Our brains are oriented towards vision, so we can use *preattentive processing* elements, like hue, saturation, and size, to make finding interesting patterns easier. 

Since we already have a correlation matrix, we can use various means to find those patterns, which include visualizing the matrix itself, network graphs and others.  Here is one way to do it.

::: {.callout-note}
Some recommended R packages for visualizing a correlation matrix include `corrr`, `ggcor`, and `corrplot`. For python, one has options for `seaborn`, `pandas`, `biokit`, and others.
:::

```{r corrplot_demo}
#| echo: FALSE
#| fig-cap: Correlation matrix visualization
library(corrplot)

corrplot.mixed(correlation_matrix, tl.col = "gray25")

# df_cormat |> rename(term = feature) |> autoplot(triangular = 'full')
```

Let's break down what we're seeing just a little bit. The lower triangle has the correlation values. It adds information, though, by changing the hue by correlation value -- red for negative values and blue for positive values -- and increasing the saturation as the correlation value becomes stronger. The upper triangle contains the same information, but the size of the circle is tied directly to the strength of the correlation. You'll also notice that the weaker correlations are more hidden in the visualization, allowing us to focus only on those interesting relationships.

What do you think? Was it easier to spot the points of interest? It looks like there is an a-b-c group and x-y-z group that are similarly correlated within their respective groups. We can also see that the a-b-c group is negatively correlated with the x-y-z group. Visualizing the correlation matrix can usually make it easier to find those interesting patterns.


### Commentary

The correlation is a starting point for understanding linear models, which serve as the foundation for modeling in general. It is very limited by only assessing linear relationships between variables, as well as only pairwise relationships. Other metrics can overcome these, but they have their own limitations. The basic Pearson-Product-Moment correlation coefficient is still the most widely used and a typical starting point in many data adventures.

Things to explore further next:

- Rank correlation (e.g., Spearman's rho, Kendall's tau)
- Distance metrics (e.g., euclidean, manhattan, cosine)
- Non-linear relationships and interactions (e.g., distance correlation, polynomial, splines)
- Multivariate relationships (e.g., partial correlations, r-squared)
